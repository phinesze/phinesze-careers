export const supplement = `
### 〈自身について〉

#### 【フリーランスを選んだ理由】

数々の現場を経験することで多様な経験ができるのではと思いました。
また場所や時間を問わず比較的自由に働けるのではと思いました。
将来的には、勤務時間を少なくして、趣味でのプロジェクトやWebサービスの構築やOSSソフトウェアへの参画など業務にとらわれない活動をするといった、可能性を広げるといった面でもフリーランスを選びました。

#### 【フロントエンドを主に携わっていた理由】

自身で触ってみたときにデザインなどを比較的自由にできることを魅力的に思いました。

#### 【フロントエンドを設計する際のコツは】

まずページコンポーネントから画面設計図の構造に近づけるようHTMLコーディングして、必要そうだと思った時、細かい順にコンポーネント化するような手順で行う事です。

画面設計図からデザインや画面機能が共通になりそうなものを考えながら、単純なテキスト入力要素やラベル要素などから作成していき、テキストとラベルのセット、データ出力用テーブルやモーダルウィンドウといった徐々に大きなコンポーネント要素を作成していくといったことになると思います。

#### 【コーディングする際に気を配っている事】

DRY原則や関心の分離（SoC）には十分注意を払って書いております。

#### 【今までの案件で大変だったことはなんでしょうか、また、どのように対応しましたでしょうか？】

過去の古い案件で重複した機能のあるロジックが1つのプロジェクトに散在したことがありました。
Dry原則に考慮するため、ロジックの共通点を見つけ、不具合が出ないよう確認をしつつ1つに統合するよう作業しました。

#### 【自身が得意だと思う事】

物事を深く考えて、プロジェクト全体の設計も考慮して、ソースコードの関数やフロントエンドのコンポーネントの設計と開発とそのための提案をチームにできるところだと思います。
業務効率化のために、chromeの拡張機能の開発を提案して開発したり、過去に自身が使用して良かったと思うフレームワークの導入をプルリクエストで検討したりしました。

#### 【今までで褒められた点】

比較的対応の素早さを評価されることが多いかなと思います。

#### 【今までの案件で自主的に行動した例】

基本的に直近の案件では割り振られたタスクのみならずとも、自身が改修したいと思った箇所についてはGitHub（またはGitLab, BitBucketなど）のプルリクエストを出してするように心がけております。
（_案件#17_）プロジェクトの設計段階でER図を作成してDBのバス停留所やバス路線などのテーブルとリレーションを作成しました。
（_案件#15_）cloudFunctionsのダッシュボードでAPIをどう実装するかどうかを提案しました、
（_案件#14_）グラフを表示させてほしいとの要望からvue-chart.jsを選定して導入しました。
（_案件#14_）もともとvue.jsのclass APIで記述されていたものを自身の提案によりcomposition-apiに記述し直しました。

#### 【自身が苦手だと思う事】

リアルタイムのミーティングなどで咄嗟に言葉を出すことは少し苦手としておりますが、報告する内容などをあらかじめメモしておく事などで改善を図っております。

#### 【どのように新しい言語を学んでいったのか?】

基本的には言語の公式サイトやその他のWebページを参照しながらの独学になります。

#### 【今後のキャリアステップについて】

開発をメインにしつつ、基本設計、詳細設計や一部の用件定義についても徐々に提案していけるように考えております。
新しい物事に対してどんどん挑戦できるような感じの職場で働きたいといった形はあるかと思います。

#### 【このエンジニアで働きたいなど、この業界で働きたい。といったものはありますでしょうか？】

今まではこれといったものはなかったのですが、DX（デジタルトランスフォーメーション）に関連するものなど世の中の役に立っていると思えるようなものであれば働きたいなと思っております。

### 〈開発について〉

#### 【チームで作業、コミュニケーションを進める際に気を配っている事】

何か既存のソースコードや仕様書の部分で改善したいところがあった場合はタスク管理ツール（JiraやRedmine）に課題としてあげ、他のチームの反応が良い場合にGitのブランチを切り、リポジトリ管理ツール （GitHub, Bitbuckert、Gitlabなどん）にプルリクエストを投げるといったことをしておりました。
Gitリポジトリ管理ツールでプルリクエストを送る際はスクリーンショットなど視覚的にわかりやすいものを添付するようにしている。
フロントエンドなどの画面の不具合に関する質問する場合はスクリーンショットをSlackに添付。
それでも意図がつかみづらい場合にはSlackのハドルミーティングやmeetなどのミーティング機能を使うこともあります。

#### 【Nuxt.js などの ServerSideRendering で実装するときに気をつける事】

指定したソースコードがサーバー側で実行されるのかクライアント上で実行されるのか、あるいは両方なのかと言ったことを考慮しなければならないと思います。例としてはLocalStorageを使用する箇所はクライアントでしか使用できないと言った感じです。

#### 【フロントエンドでのパッケージの選定となる基準とは何でしょうか？】

なるべくドキュメントが多く存在する、メンテナンスが直近でも行われているといったものを選択しております。
例としてvueUseがあるのですが、_案件#17_ でユーザーの状態などを一時保存したいといった時に、ローカルストレージ使用する案を提案しました。vueのcomposition-apiの上でローカルストレージを簡潔に記述したいといった時に、比較的メジャーでメンテナンスも行われていて、簡潔に記述するといった要件を満たしていたことからこちらのvueUseを採用するに至りました。

#### 【今までの案件でのコードレビューの仕方】

GitHubの機能で自動的にユーザーがレビュー担当にアサインされる機能があり、そちらでレビューを分担しておりました。
レビューはソースコードの記述方法が事前に合意したものと沿っているか、動作が仕様書に沿っているか、余分なソースコードがないか、命名は適切かなどの事柄を良くみていました。

#### 【コードレビューでよく指摘された箇所は？】

そちらの方を書いた方が短いコードになりますよといった点や、他のコードと記述を揃えた方が良い、といった内容です。

#### 【主なテストの実行手法】

単体テストではjest、E2Eテストではpostmanとnewmanを使用したテストをしました（_案件#20_ など）。jestはGitHub上でcircleCIを使用してテストをおこない、テストが全てパスした時のみプルリクエストのマージができるような形にしておりました。

#### 【Git の使い方で気を配っていること】

Gitでの1つのコミットはなるべく1つの単位で実行することをなるべく心がけている。
プルリクエストを出す前などにgit merge origin/masterなど作業ブランチに対してマスターブランチをマージしています。

#### 【DB の SQL の経験の詳細】

SQL文につきましてはSELECTやINSERT INTO, UPDATE, DELETEといった基本的なDML（Data Manipulation Language） を使用したデータ操作や、CREATEやALTERなどのDDL（Data Definition Language） だったり、COUNTやMAXなど集約関数を使用した処理など、一通りのSQLを記述することが可能です。過去の案件で使用したものは、JOINを使用したSELECT文、UNIONを使用したテーブルの結合、ストアドプロシージャを使用したパフォーマンスの最適化といったものになります。

#### 【DB の設計の経験の詳細】

設計につきましては #17の案件にてデータベースの構造をER図で提案をしたことがございます。（バス停留所のデータを運行ルートに沿って線で結ぶようなイメージ）
SQLのテーブルに関しては一対多のIDでの参照や多対多のリレーションシップで別テーブルを定義するなどの基本的な設計ならば対応可能だと思います。

#### 【セキュリティに関する実装をした経験・知見】
クロスサイトスクリプティングなどのインジェクションやCSRFの対策の経験あり。
また、Auth0を使用したシングルサインオンの実装に関わることも一部しました。

### 〈案件に携わる期間について〉
#### 【短期で終了する案件がある件について】
短期の参画が続いており恐縮ですが、フリーランスという身なので、開発工程が短期で終了することや予算の兼ね合いでプロジェクトが収束したことで
先んじて契約終了となったケースが多かったです。
`;
